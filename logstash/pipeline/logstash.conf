input {
	kafka {
		client_id => "logstash"
		group_id => "logstash-group"
		topics => ["api-log"]
		codec => json
		bootstrap_servers => "kafka:9092"
		consumer_threads => "1"
	}
}

filter {
	if [agentId] =~ /^report_(dev|stg|real)/{
		
		grok {
			match => { "message" => "^\[%{DATA:logtime}\]\[%{DATA:thread_name}\]\[%{LOGLEVEL:level}%{SPACE}\]\[%{DATA:function}\].\(%{DATA:filename}:%{DATA:line}\).([^{]*)(%{GREEDYDATA:json_data})([^}]*)" }
		}

		json {
			source => "json_data"
		}
	}else if [agentId] =~ /^rest_(dev|stg|real)/{
		json {
			source => "message"
		}

		if [resBody] {
			json {
				source => "resBody"
				target => "resBody"
			}
		}
	}else{
		grok {
			match => { "message" => "^\[%{DATA:logtime}\]\[%{DATA:thread_name}\]\[%{LOGLEVEL:level}%{SPACE}\]\[%{DATA:function}\].\(%{DATA:filename}:%{DATA:line}\).(%{GREEDYDATA:description})" }
		}
	}
	

	ruby {
		code => "
			require 'date'

			if event.get('timestamp') != nil
				timestamp_string = event.get('timestamp')
				timestamp_without_millis = timestamp_string.split('.')[0]
				parsed_timestamp = Time.parse(timestamp_without_millis)
				
				utc_timestamp = parsed_timestamp - 9 * 60 * 60
				logstash_timestamp = LogStash::Timestamp.at(utc_timestamp.to_i, utc_timestamp.nsec)

				event.set('timestamp', logstash_timestamp)
			end

			['reqDate', 'sendDate', 'reportDate'].each do |key|
				if event.get(key).is_a? Numeric
                    event.set(key.gsub(/[A-Z]/, '_\0').downcase, LogStash::Timestamp.at(event.get(key)/1000))
                end
			end

			if event.get('timestamp') == nil
				if event.get('req_date') != nil
					event.set('timestamp', event.get('req_date'))
				end
			end
		"
	}



	mutate{
		convert => {
            "processTime" => "integer"
			"carrier" => "string"
			"msgKey" => "string"
		}
		remove_field => [
			"event", "json_data", "message"
		]
	}
}


output {
	if "_grokparsefailure" in [tags] or "_rubyexception" in [tags] or "_dateparsefailure" in [tags] or "_mutate_error" in [tags]  {
		stdout { codec  => rubydebug { metadata => true } }
	}else{
		if "api-error" in [tags] {
			elasticsearch {
				hosts => ["http://elasticsearch01:9200", "http://elasticsearch02:9200", "http://elasticsearch03:9200"]
				user => "elastic"
				password => "pwelastic"
				ilm_rollover_alias => "api-error"
				ilm_pattern => "000001"
				ilm_policy => "ilm-gw-applog"
				action => "create"
			}
		}else{
			elasticsearch {
				hosts => ["http://elasticsearch01:9200", "http://elasticsearch02:9200", "http://elasticsearch03:9200"]
				user => "elastic"
				password => "pwelastic"
				ilm_rollover_alias => "api-log"
				ilm_pattern => "000001"
				ilm_policy => "ilm-gw-tran"
				action => "create"
			}
		}
	}
}

